import os
from typing import List
import googleapiclient
import googleapiclient.errors
import google_auth_oauthlib.flow
import googleapiclient.discovery


class Youtube_Api:
    client = None

    def init_youtube_client(self, client_secrets_file: str) -> None:
        """Initialize the Youtube Client to give proper permission for future API calls

        :param client_secrets_file: Path to the client secrets file, generated by the Google API Console
        :type client_secrets_file: str
        """
        scopes = ["https://www.googleapis.com/auth/youtube.force-ssl"]
        # Disable OAuthlib's HTTPS verification when running locally.
        # *DO NOT* leave this option enabled in production.
        os.environ["OAUTHLIB_INSECURE_TRANSPORT"] = "1"

        api_service_name = "youtube"
        api_version = "v3"

        # Get credentials and create an API client
        flow = google_auth_oauthlib.flow.InstalledAppFlow.from_client_secrets_file(client_secrets_file, scopes)
        credentials = flow.run_console()
        self.client = googleapiclient.discovery.build(api_service_name, api_version, credentials=credentials)

    def get_playlist_id_by_name(self, playlist_name: str) -> str:
        """Get the id of a Youtube playlist given its name

        :param playlist_name: The name of the Youtube playlist
        :type playlist_name: str
        :return: The id of the Youtube playlist
        :rtype: str
        """
        request = self.client.playlists().list(part="snippet", mine=True)
        try:
            response = request.execute()
            playlists = response["items"]
            for playlist in playlists:
                if playlist["snippet"]["title"] == playlist_name:
                    playlist_id = playlist["id"]
                    print(f"Playlist {playlist_name} was successfully found with id: {playlist_id}.")
                    return playlist_id
            return None
        except googleapiclient.errors.HttpError as e:
            print(f"Could not find playlist {playlist_name} with error: {e}")
            return None

    def does_playlist_exist_by_name(self, playlist_name: str) -> bool:
        """Check if a Youtube playlist exists based on its name

        :param playlist_name: The name of the Youtube playlist
        :type playlist_name: str
        :return: Whether the playlist exists or not
        :rtype: bool
        """
        if self.get_playlist_id_by_name(playlist_name) is None:
            return False
        return True

    def delete_playlist(self, playlist_id: str) -> None:
        """Delete a Youtube playlist with a given id

        :param playlist_id: The id of the playlist to delete
        :type playlist_id: str
        """
        request = self.client.playlists().delete(id=playlist_id)
        try:
            request.execute()
            print(f"Playlist {playlist_id} was successfully deleted.")
        except googleapiclient.errors.HttpError as e:
            print(f"Could not delete playlist {playlist_id} with error: {e}")

    def create_playlist(self, playlist_name: str) -> str:
        """Create a Youtube playlist with a given name

        :param playlist_name: The name of the newly created playlist
        :type playlist_name: str
        :return: The id of the newly created playlist
        :rtype: str
        """
        request = self.client.playlists().insert(
            part="snippet",
            body={
                "snippet": {
                    "title": playlist_name
                }
            }
        )
        try:
            response = request.execute()
            print(f"Playlist {playlist_name} was successfully created.")
            return response["id"]
        except googleapiclient.errors.HttpError as e:
            print(f"Could not create playlist {playlist_name} with error: {e}")
            return None

    def add_videos_to_playlist(self, playlist_id: str, video_ids: List[str], position: int = 1) -> None:
        """Add Youtube videos to a Youtube playlist

        :param playlist_id: The id of the playlist
        :type playlist_id: str
        :param video_ids: List of video ids to add to the playlist
        :type video_ids: List[str]
        :param position: The position in which the video should be placed in the playlist, defaults to 99999
        :type position: int, optional
        """
        batch = self.client.new_batch_http_request()
        for video_id in video_ids:
            batch.add(
                self.client.playlistItems().insert(
                    part="snippet",
                    body={
                        "snippet": {
                            "playlistId": playlist_id,
                            "position": position,
                            "resourceId": {
                                "kind": "youtube#video",
                                "videoId": video_id
                            }
                        }
                    }
                ),
                callback=self._handle_add_videos_to_playlist
            )
            position = position + 1

        batch.execute()

    def _handle_add_videos_to_playlist(self, request_id, response, exception) -> None:
        if exception is not None:
            print(f"Could not move video with id {request_id} with error: {exception}")
        else:
            video_title = response["snippet"]["title"]
            print(f"Successully added video with id {request_id}. The video was: {video_title}")

    def add_video_to_playlist(self, playlist_id: str, video_id: str, position: int = 99999) -> None:
        """Add a Youtube video to a Youtube playlist

        :param new_playlist_id: The id of the playlist
        :type new_playlist_id: str
        :param video_id: The id of the video
        :type video_id: str
        :param position: The position in which the video should be placed in the playlist, defaults to 99999
        :type position: int, optional
        """
        request = self.client.playlistItems().insert(
            part="snippet",
            body={
                "snippet": {
                    "playlistId": playlist_id,
                    "position": position,
                    "resourceId": {
                        "kind": "youtube#video",
                        "videoId": video_id
                    }
                }
            }
        )

        try:
            response = request.execute()
            video_title = response["snippet"]["title"]
            print(f"Successully added video with id {video_id}. The video was: {video_title}")
        except googleapiclient.errors.HttpError as e:
            print(f"Could not move video with id {video_id} with error: {e}")
